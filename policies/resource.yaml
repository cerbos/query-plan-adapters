# yaml-language-server: $schema=https://api.cerbos.dev/latest/cerbos/policy/v1/Policy.schema.json

apiVersion: api.cerbos.dev/v1
resourcePolicy:
  version: default
  resource: resource
  rules:
    - actions:
        - "always-allow"
      effect: EFFECT_ALLOW
      roles:
        - USER

    - actions:
        - "always-deny"
      effect: EFFECT_DENY
      roles:
        - USER

    - actions:
        - "equal"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aBool == true

    - actions:
        - "explicit-deny"
      effect: EFFECT_DENY
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aBool == true

    - actions:
        - "explicit-deny"
      effect: EFFECT_ALLOW
      roles:
        - USER

    - actions:
        - "ne"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aString != "string"

    - actions:
        - "and"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.aBool == true
              - expr: request.resource.attr.aString != "string"

    - actions:
        - "or"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.aBool == true
              - expr: request.resource.attr.aString != "string"

    - actions:
        - "nand"
      effect: EFFECT_DENY
      roles:
        - USER
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.aBool == true
              - expr: request.resource.attr.aString != "string"

    - actions:
        - "nor"
      effect: EFFECT_DENY
      roles:
        - USER
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.aBool == true
              - expr: request.resource.attr.aString != "string"

    - actions:
        - "in"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aString in ["string", "anotherString"]

    - actions:
        - "gt"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aNumber > 1

    - actions:
        - "lt"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aNumber < 2

    - actions:
        - "gte"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aNumber >= 1

    - actions:
        - "lte"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aNumber <= 2

    - actions:
        - "relation-some"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: P.id in request.resource.attr.ownedBy

    - actions:
        - "relation-none"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: >
            !(P.id in request.resource.attr.ownedBy)

    - actions:
        - "relation-is"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.createdBy == P.id

    - actions:
        - "relation-is-not"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: >
            !(request.resource.attr.createdBy == P.id)

    - actions:
        - "equal-nested"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.nested.aBool == true

    - actions:
        - "equal-deeply-nested"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.nested.nextlevel.aBool == true

    - actions:
        - "relation-eq-number"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.nested.aNumber == 1

    - actions:
        - "relation-lt-number"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.nested.aNumber < 2

    - actions:
        - "relation-lte-number"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.nested.aNumber <= 2

    - actions:
        - "relation-gte-number"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.nested.aNumber >= 1

    - actions:
        - "has-tag"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: >
            "public" in request.resource.attr.tags

    - actions:
        - "has-no-tag"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: >
            !("private" in request.resource.attr.tags)

    - actions:
        - "relation-gt-number"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.nested.aNumber > 1

    - actions:
        - "relation-multiple-all"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.nested.aNumber > 1
              - expr: request.resource.attr.nested.aNumber < 3

    - actions:
        - "relation-multiple-or"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.createdBy == P.id
              - expr: P.id in request.resource.attr.ownedBy

    - actions:
        - "relation-multiple-none"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          none:
            of:
              - expr: request.resource.attr.createdBy == P.id
              - expr: >
                  "public" in request.resource.attr.tags

    - actions:
        - "contains"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aString.contains("str")

    - actions:
        - "starts-with"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aString.startsWith("str")

    - actions:
        - "ends-with"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aString.endsWith("ing")

    - actions:
        - "is-set"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: request.resource.attr.aOptionalString != null

    - actions:
        - "has-intersection"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: hasIntersection(request.resource.attr.tags.map(t, t.name), request.principal.attr.tags)

    - actions:
        - "has-intersection-direct"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: hasIntersection(request.resource.attr.tags, ["public", "draft"])

    - actions:
        - "exists-single"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: R.attr.tags.exists(tag, tag.id == "tag1")

    - actions:
        - "exists-multiple"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: R.attr.tags.exists(tag, tag.id == "tag1" && tag.name == "public")

    - actions:
        - "exists-one"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: R.attr.tags.exists_one(tag, tag.name == "public")

    - actions:
        - "all"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: R.attr.tags.all(tag, tag.name == "public")

    - actions:
        - "filter"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: R.attr.tags.filter(tag, tag.name == "public")

    - actions:
        - "kitchensink"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          all:
            of:
              - expr: R.attr.tags.filter(tag, tag.name == "public")
              - any:
                  of:
                    - expr: request.resource.attr.aOptionalString != null
                    - expr: request.resource.attr.aBool == true
                    - expr: R.attr.tags.exists(tag, tag.id == "tag1" && tag.name == "public")
                    - expr: request.resource.attr.nested.aNumber > 1
                    - expr: request.resource.attr.aString.endsWith("ing")
                    - expr: request.resource.attr.aString.startsWith("ing")
                    - expr: request.resource.attr.aString.contains("ing")
              - all:
                  of:
                    - expr: hasIntersection(request.resource.attr.tags.map(t, t.name), request.principal.attr.tags)
                    - expr: >
                        "public" in request.principal.attr.tags
                    - expr: request.resource.attr.nested.nextlevel.aBool == true

    - actions:
        - "deep-nested-category-label"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          # Fix the exists expression to properly handle nested relations
          expr: request.resource.attr.categories.exists(cat, cat.subCategories.exists(sub, sub.labels.exists(label, label.name == "important")))

    - actions:
        - "deep-nested-exists"
      effect: EFFECT_ALLOW
      roles:
        - USER
      condition:
        match:
          expr: R.attr.categories.exists(cat, cat.name == "business" && cat.subCategories.exists(sub, sub.name == "finance"))
